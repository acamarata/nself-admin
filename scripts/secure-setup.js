#!/usr/bin/env node

/**
 * Secure Setup Script for nself-admin
 * Helps users set up secure credentials and configuration
 */

const readline = require('readline')
const fs = require('fs')
const path = require('path')
const crypto = require('crypto')
const bcrypt = require('bcryptjs')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

// Password requirements
const MIN_PASSWORD_LENGTH = 12
const PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&#])/

// Weak passwords to reject
const WEAK_PASSWORDS = [
  'admin123',
  'password',
  'changeme',
  'changeme123',
  'default',
  'admin',
  'test',
  'test123',
  'demo',
  'demo123',
  'password123',
  '123456',
  '12345678',
  'qwerty',
  'letmein',
  'welcome',
]

// Generate secure random password
function generateSecurePassword(length = 16) {
  const charset =
    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?'
  let password = ''

  // Ensure at least one of each required character type using crypto.randomInt
  password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[crypto.randomInt(0, 26)]
  password += 'abcdefghijklmnopqrstuvwxyz'[crypto.randomInt(0, 26)]
  password += '0123456789'[crypto.randomInt(0, 10)]
  password += '!@#$%^&*()'[crypto.randomInt(0, 10)]

  // Fill the rest randomly with cryptographically secure randomness
  for (let i = 4; i < length; i++) {
    password += charset[crypto.randomInt(0, charset.length)]
  }

  // Shuffle the password using Fisher-Yates with crypto.randomInt
  const arr = password.split('')
  for (let i = arr.length - 1; i > 0; i--) {
    const j = crypto.randomInt(0, i + 1)
    ;[arr[i], arr[j]] = [arr[j], arr[i]]
  }
  return arr.join('')
}

// Validate password strength
function validatePassword(password) {
  const errors = []

  if (password.length < MIN_PASSWORD_LENGTH) {
    errors.push(`Password must be at least ${MIN_PASSWORD_LENGTH} characters`)
  }

  if (!PASSWORD_REGEX.test(password)) {
    errors.push(
      'Password must contain uppercase, lowercase, number, and special character',
    )
  }

  if (WEAK_PASSWORDS.includes(password.toLowerCase())) {
    errors.push('Password is too common. Please choose a stronger password')
  }

  // Check for sequential characters
  if (/123|234|345|456|567|678|789|890|abc|bcd|cde|def/i.test(password)) {
    errors.push('Password contains sequential characters')
  }

  // Check for repeated characters
  if (/(.)\\1{3,}/.test(password)) {
    errors.push('Password contains too many repeated characters')
  }

  return errors
}

// Generate secure random string
function generateSecret(length = 32) {
  return crypto.randomBytes(length).toString('hex')
}

// Update .env.local file
function updateEnvFile(updates) {
  const envPath = path.join(process.cwd(), '.env.local')
  let content = ''

  if (fs.existsSync(envPath)) {
    content = fs.readFileSync(envPath, 'utf8')
  }

  // Update or add each key-value pair
  Object.entries(updates).forEach(([key, value]) => {
    const regex = new RegExp(`^${key}=.*$`, 'm')
    if (regex.test(content)) {
      content = content.replace(regex, `${key}=${value}`)
    } else {
      content += `\n${key}=${value}`
    }
  })

  // Ensure file starts with security header
  if (!content.includes('# Security Configuration')) {
    const header = `# Security Configuration - Generated by secure-setup
# Generated: ${new Date().toISOString()}
# ‚ö†Ô∏è  Keep this file secure and never commit it to version control

`
    content = header + content
  }

  fs.writeFileSync(envPath, content)
  return envPath
}

// Main setup flow
async function main() {
  console.log('\nüîí nself-admin Secure Setup\n')
  console.log(
    'This script will help you set up secure credentials for your admin panel.\n',
  )

  // Check current environment
  const envPath = path.join(process.cwd(), '.env.local')
  const hasEnvFile = fs.existsSync(envPath)

  if (hasEnvFile) {
    const content = fs.readFileSync(envPath, 'utf8')
    if (content.includes('ADMIN_PASSWORD')) {
      console.log('‚ö†Ô∏è  Warning: .env.local already contains ADMIN_PASSWORD')

      const overwrite = await new Promise((resolve) => {
        rl.question(
          'Do you want to overwrite existing configuration? (y/N): ',
          (answer) => {
            resolve(answer.toLowerCase() === 'y')
          },
        )
      })

      if (!overwrite) {
        console.log('\n‚úÖ Setup cancelled. Existing configuration preserved.\n')
        rl.close()
        return
      }
    }
  }

  console.log('\nüìù Password Requirements:')
  console.log('   - At least 12 characters')
  console.log('   - Include uppercase and lowercase letters')
  console.log('   - Include numbers and special characters')
  console.log('   - Avoid common passwords and patterns\n')

  // Password setup
  const useGenerated = await new Promise((resolve) => {
    rl.question(
      'Would you like to generate a secure password? (Y/n): ',
      (answer) => {
        resolve(answer.toLowerCase() !== 'n')
      },
    )
  })

  let password
  let passwordHash

  if (useGenerated) {
    password = generateSecurePassword(16)
    console.log('\nüîë Generated secure password:')
    console.log(`   ${password}`)
    console.log(
      "\n‚ö†Ô∏è  IMPORTANT: Save this password securely! You won't see it again.\n",
    )

    passwordHash = await bcrypt.hash(password, 12)
  } else {
    let isValid = false

    while (!isValid) {
      password = await new Promise((resolve) => {
        rl.question('\nEnter admin password: ', resolve)
      })

      const errors = validatePassword(password)
      if (errors.length > 0) {
        console.log('\n‚ùå Password does not meet requirements:')
        errors.forEach((error) => console.log(`   - ${error}`))
      } else {
        isValid = true
        passwordHash = await bcrypt.hash(password, 12)
        console.log('\n‚úÖ Password meets security requirements')
      }
    }
  }

  // Additional security options
  console.log('\nüõ°Ô∏è  Additional Security Options\n')

  const setupJWT = await new Promise((resolve) => {
    rl.question('Generate secure JWT secret? (Y/n): ', (answer) => {
      resolve(answer.toLowerCase() !== 'n')
    })
  })

  const setupSessionSecret = await new Promise((resolve) => {
    rl.question('Generate secure session secret? (Y/n): ', (answer) => {
      resolve(answer.toLowerCase() !== 'n')
    })
  })

  // Build configuration
  const config = {
    ADMIN_PASSWORD: passwordHash,
    ADMIN_PASSWORD_IS_HASHED: 'true',
  }

  if (setupJWT) {
    config.JWT_SECRET = generateSecret(32)
    console.log('‚úÖ Generated secure JWT secret')
  }

  if (setupSessionSecret) {
    config.SESSION_SECRET = generateSecret(32)
    console.log('‚úÖ Generated secure session secret')
  }

  // Environment-specific settings
  const isProduction = await new Promise((resolve) => {
    rl.question('\nIs this for production use? (y/N): ', (answer) => {
      resolve(answer.toLowerCase() === 'y')
    })
  })

  if (isProduction) {
    config.NODE_ENV = 'production'
    config.AUTO_UPDATE = 'false'
    console.log('‚úÖ Configured for production environment')
  } else {
    config.NODE_ENV = 'development'
    console.log('‚úÖ Configured for development environment')
  }

  // Write configuration
  console.log('\nüíæ Saving configuration...')
  const savedPath = updateEnvFile(config)

  console.log('\n‚úÖ Setup completed successfully!\n')
  console.log('üìÅ Configuration saved to:', savedPath)
  console.log('\nüöÄ Next steps:')
  console.log('   1. Review the .env.local file')
  console.log('   2. Set any additional environment variables needed')
  console.log(
    '   3. Start the admin panel with: npm run dev (or npm run start for production)',
  )

  if (isProduction) {
    console.log('\n‚ö†Ô∏è  Production Security Checklist:')
    console.log('   [ ] Use HTTPS/TLS for all connections')
    console.log('   [ ] Configure firewall rules')
    console.log('   [ ] Set up monitoring and alerting')
    console.log('   [ ] Regular security updates')
    console.log('   [ ] Backup configuration regularly')
  }

  console.log('\nüîí Security Tips:')
  console.log('   - Never share or commit .env.local to version control')
  console.log(
    '   - Use environment variables in production instead of .env files',
  )
  console.log('   - Rotate passwords and secrets regularly')
  console.log('   - Monitor access logs for suspicious activity')

  console.log()
  rl.close()
}

// Run the setup
main().catch((error) => {
  console.error('\n‚ùå Setup failed:', error.message)
  rl.close()
  process.exit(1)
})
